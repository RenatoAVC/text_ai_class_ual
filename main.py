
from flask import Flask, render_template, request
import pickle, string, nltk
from nltk.corpus import stopwords



with open('model_pickle', 'rb') as f:
    mod= pickle.load(f)


def classf(test):
    if test[0] == 1.:
        return('Text generated by AI')
    elif test[0] == 0.:
        return('Text generated by Human')
    else:
        return('Contact Admin')
    
def class_perc(z):
    if z[0] > z[1]:
            return f'{round(z[0],2)}H'
    elif z[0] < z[1]:
            return f'{round(z[1],2)}AI'
    else:
        f'Contact Admin'



def remove_stopwords(text):
    stop_words = set(stopwords.words('english'))
    words = nltk.word_tokenize(text)
    filtered_words = [word for word in words if word.lower() not in stop_words]
    filtered_words= ' '.join(filtered_words)
    return filtered_words

def remove_tags(text):
    tags = ['\n', '\'']
    for tag in tags:
        text = text.replace(tag, '')
    
    return text

def remove_punc(text):
    new_text = [x for x in text if x not in string.punctuation]
    new_text = ''.join(new_text)
    return new_text

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.post('/analyze')
def analyze():
    if request.method == 'POST':
        z = []
        ori_text = request.form['text_to_check']
        text = remove_tags(ori_text)
        text = remove_punc(text)
        text = remove_stopwords(text)
        a = mod.predict([text])


        single_prediction_proba = mod.predict_proba([text])
        single_prediction_proba_percentage = single_prediction_proba[0] * 100
        for prob in single_prediction_proba_percentage:
            z.append(prob)
        
        

        
    return render_template('result.html', result=classf(a), result2=f'Trusted index -> {class_perc(z)}%')



if __name__ == '__main__':
    app.run(debug=False)